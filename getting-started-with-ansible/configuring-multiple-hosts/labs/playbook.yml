---

- name: Ensure git installed
  hosts: centos 
  tags: [ 'install-git' ]
  tasks: 
  - package: name=git state=latest
    when: ansible_os_family == 'RedHat' # conditional task
    become: yes # https://docs.ansible.com/ansible/latest/user_guide/become.html
  # Note: since we have a group of centos hosts we don't really need the when condition but it is here to demo conditional tasks and in the event we have a mistake or a group that contains a host that isn't a RHEL derivative 

- name: Ensure ~/.gitconfig copied from master.gitconfig
  hosts: vagrant
  tasks:
  
  - name: git_config module simplifies listing configuration 
    git_config: list_all=yes scope=global

  - name: first show no config in targets
    command: git config --global --list
    ignore_errors: yes 
      # https://docs.ansible.com/ansible/latest/user_guide/playbooks_error_handling.html#ignoring-failed-commands
      # we know git config lookup will fail so ensure we don't stop playbook execution with ignore_errors
    register: git_config_before # how to register variables, in this case we capture the module output 
  - name: show git config output always - verbosity 0 is default for debug module
    debug: var=git_config_before # how to use variables!
  
  - name: tried and true copy module with master.gitconfig from previously in the course 
    copy: src=master.gitconfig dest=~/.gitconfig
  
  - name: show newly added config
    command: git config --global --list
    ignore_errors: yes
    register: git_config_after
  - name: ensure to show git config after with debug - this time only show stdout_lines
    debug: var=git_config_after.stdout_lines

## Notes
# - This is a great read on error handling: https://docs.ansible.com/ansible/latest/user_guide/playbooks_error_handling.html
# - Valid variable names: https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html?highlight=register#creating-valid-variable-names
